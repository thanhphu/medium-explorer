/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.honeybee.BlockMeta', null, global);
goog.exportSymbol('proto.honeybee.Empty', null, global);
goog.exportSymbol('proto.honeybee.MetaData', null, global);
goog.exportSymbol('proto.honeybee.TxMeta', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.honeybee.MetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.honeybee.MetaData.repeatedFields_, null);
};
goog.inherits(proto.honeybee.MetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.honeybee.MetaData.displayName = 'proto.honeybee.MetaData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.honeybee.MetaData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.honeybee.MetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.honeybee.MetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.honeybee.MetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.MetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    metaBlock: (f = msg.getMetaBlock()) && proto.honeybee.BlockMeta.toObject(includeInstance, f),
    metaTxsList: jspb.Message.toObjectList(msg.getMetaTxsList(),
    proto.honeybee.TxMeta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.honeybee.MetaData}
 */
proto.honeybee.MetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.honeybee.MetaData;
  return proto.honeybee.MetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.honeybee.MetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.honeybee.MetaData}
 */
proto.honeybee.MetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.honeybee.BlockMeta;
      reader.readMessage(value,proto.honeybee.BlockMeta.deserializeBinaryFromReader);
      msg.setMetaBlock(value);
      break;
    case 2:
      var value = new proto.honeybee.TxMeta;
      reader.readMessage(value,proto.honeybee.TxMeta.deserializeBinaryFromReader);
      msg.addMetaTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.honeybee.MetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.honeybee.MetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.honeybee.MetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.MetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetaBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.honeybee.BlockMeta.serializeBinaryToWriter
    );
  }
  f = message.getMetaTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.honeybee.TxMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockMeta meta_block = 1;
 * @return {?proto.honeybee.BlockMeta}
 */
proto.honeybee.MetaData.prototype.getMetaBlock = function() {
  return /** @type{?proto.honeybee.BlockMeta} */ (
    jspb.Message.getWrapperField(this, proto.honeybee.BlockMeta, 1));
};


/** @param {?proto.honeybee.BlockMeta|undefined} value */
proto.honeybee.MetaData.prototype.setMetaBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.honeybee.MetaData.prototype.clearMetaBlock = function() {
  this.setMetaBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.honeybee.MetaData.prototype.hasMetaBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TxMeta meta_txs = 2;
 * @return {!Array<!proto.honeybee.TxMeta>}
 */
proto.honeybee.MetaData.prototype.getMetaTxsList = function() {
  return /** @type{!Array<!proto.honeybee.TxMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.honeybee.TxMeta, 2));
};


/** @param {!Array<!proto.honeybee.TxMeta>} value */
proto.honeybee.MetaData.prototype.setMetaTxsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.honeybee.TxMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.honeybee.TxMeta}
 */
proto.honeybee.MetaData.prototype.addMetaTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.honeybee.TxMeta, opt_index);
};


proto.honeybee.MetaData.prototype.clearMetaTxsList = function() {
  this.setMetaTxsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.honeybee.BlockMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.honeybee.BlockMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.honeybee.BlockMeta.displayName = 'proto.honeybee.BlockMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.honeybee.BlockMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.honeybee.BlockMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.honeybee.BlockMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.BlockMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocknum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    creator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    txcount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.honeybee.BlockMeta}
 */
proto.honeybee.BlockMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.honeybee.BlockMeta;
  return proto.honeybee.BlockMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.honeybee.BlockMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.honeybee.BlockMeta}
 */
proto.honeybee.BlockMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatetime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.honeybee.BlockMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.honeybee.BlockMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.honeybee.BlockMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.BlockMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocknum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCreator();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTxcount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 blockNum = 1;
 * @return {number}
 */
proto.honeybee.BlockMeta.prototype.getBlocknum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.honeybee.BlockMeta.prototype.setBlocknum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string creator = 2;
 * @return {string}
 */
proto.honeybee.BlockMeta.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.honeybee.BlockMeta.prototype.setCreator = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 createTime = 3;
 * @return {number}
 */
proto.honeybee.BlockMeta.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.honeybee.BlockMeta.prototype.setCreatetime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 txCount = 4;
 * @return {number}
 */
proto.honeybee.BlockMeta.prototype.getTxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.honeybee.BlockMeta.prototype.setTxcount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.honeybee.TxMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.honeybee.TxMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.honeybee.TxMeta.displayName = 'proto.honeybee.TxMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.honeybee.TxMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.honeybee.TxMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.honeybee.TxMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.TxMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createtime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: msg.getId_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: jspb.Message.getFieldWithDefault(msg, 4, 0),
    from: msg.getFrom_asB64(),
    to: msg.getTo_asB64(),
    coin: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.honeybee.TxMeta}
 */
proto.honeybee.TxMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.honeybee.TxMeta;
  return proto.honeybee.TxMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.honeybee.TxMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.honeybee.TxMeta}
 */
proto.honeybee.TxMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatetime(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.honeybee.TxMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.honeybee.TxMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.honeybee.TxMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.TxMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getCoin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint64 createTime = 1;
 * @return {number}
 */
proto.honeybee.TxMeta.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.honeybee.TxMeta.prototype.setCreatetime = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.honeybee.TxMeta.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes id = 2;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.honeybee.TxMeta.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.honeybee.TxMeta.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.honeybee.TxMeta.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 type = 3;
 * @return {number}
 */
proto.honeybee.TxMeta.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.honeybee.TxMeta.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 version = 4;
 * @return {number}
 */
proto.honeybee.TxMeta.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.honeybee.TxMeta.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes from = 5;
 * @return {!(string|Uint8Array)}
 */
proto.honeybee.TxMeta.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes from = 5;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.honeybee.TxMeta.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.honeybee.TxMeta.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value */
proto.honeybee.TxMeta.prototype.setFrom = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes to = 6;
 * @return {!(string|Uint8Array)}
 */
proto.honeybee.TxMeta.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes to = 6;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.honeybee.TxMeta.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.honeybee.TxMeta.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value */
proto.honeybee.TxMeta.prototype.setTo = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string coin = 7;
 * @return {string}
 */
proto.honeybee.TxMeta.prototype.getCoin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.honeybee.TxMeta.prototype.setCoin = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.honeybee.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.honeybee.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.honeybee.Empty.displayName = 'proto.honeybee.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.honeybee.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.honeybee.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.honeybee.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.honeybee.Empty}
 */
proto.honeybee.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.honeybee.Empty;
  return proto.honeybee.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.honeybee.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.honeybee.Empty}
 */
proto.honeybee.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.honeybee.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.honeybee.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.honeybee.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.honeybee.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.honeybee);
